# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH=$HOME/.oh-my-zsh

# Set name of the theme to load. Optionally, if you set this to "random"
# it'll load a random theme each time that oh-my-zsh is loaded.
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
ZSH_THEME="robbyrussell"

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/rsa_id"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
export PATH=~/bin:$PATH
alias rm='rm -rf'
alias cp='cp -rf'
alias vi='vim'

alias df='df -h'
alias dos2unix='fromdos'
alias unix2dos='todos'
alias tailf='tail -f'
alias astyle='astyle --style=linux -s -c -c -p -U -n'
alias trim_file='sed -i "s/[ \t]*$//"'
alias mkdir='mkdir -p'
alias hisgrep='history |grep'

function swapfile()
{
    if [[ $# -lt 2 ]];then
        echo "Usage: swapfile file1 file2"
        return
    fi
    local TMPFILE=tmp.$$
    mv "$1" $TMPFILE
    mv "$2" "$1"
    mv $TMPFILE "$2"
}
function backtgz()
{
    if [[ -z "$1" ]];then
        echo "Usage: backup filename"
        return
    fi
    local suffix=$(date +"%Y%m%d-%H%M%S")
    if [[ -z "$2" ]];then
        tar -zcvf $1_${suffix}.tgz $1
    else
        tar -zcf $2  $1
    fi
}
function backup()
{   
    if [[ -z "$1" ]];then
        echo "Usage: backup filename"
        return
    fi
    local suffix=$(date +"%Y%m%d-%H%M%S")
    cp -rvf  "$1" "$1_$suffix"
}
function untar(){
    if [ -z "$1" ];then
        echo "Usage: extract file"
        return
    fi
    if [ -f "$1"  ]; then
        case "$1" in
            *.tar)      tar -xvf $@   ;;
            *.tar.gz)   tar -xvzf $@  ;;
            *.tgz)      tar -xvzf $@  ;;
            *.tar.bz2)  tar -xvjf $@  ;;
            *.tbz2)     tar -xvjf $@  ;;
            *.tar.xz)   tar -xvJf $@  ;;
            *.txz)      tar -xvJf $@  ;;
            *.bz2)      bunzip2 $1   ;;
            *.rar)      unrar x $1     ;;
            *.gz)       gunzip $1    ;;
            *.zip)      unzip $1     ;;
            *.Z)        uncompress $1 ;;
            *.7z)       7z x $1       ;;
            *)          echo "'$1' cannot be extarct via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}
function rmbigfold(){
	mkdir /tmp/blank
	rsync --delete-before -a -H -v --progress --stats /tmp/blank/ $1
	rm -rvf $1
}
function retry_command()
{
    command $@
    while [ "$?" != "0" ]
    do
        sleep 5
        command $@
    done

}
function show_time()
{
    local start_time=$(date +"%s")
    command "$@"
    local ret=$?
    local end_time=$(date +"%s")
    local tdiff=$(($end_time-$start_time))
    local hours=$(($tdiff / 3600 ))
    local mins=$((($tdiff % 3600) / 60))
    local secs=$(($tdiff % 60))
    local ncolors=$(tput colors 2>/dev/null)
    if [ -n "$ncolors" ] && [ $ncolors -ge 8 ]; then
        color_failed="\e[0;31m"
        color_success="\e[0;32m"
        color_reset="\e[00m"
    else
        color_failed=""
        color_success=""
        color_reset=""
    fi
    echo
    if [ $ret -eq 0 ] ; then
        echo -n -e "${color_success}#### run completed successfully "
    else
        echo -n -e "${color_failed}#### run failed to build some targets "
    fi
    if [ $hours -gt 0 ] ; then
        printf "(%02g:%02g:%02g (hh:mm:ss))" $hours $mins $secs
    elif [ $mins -gt 0 ] ; then
        printf "(%02g:%02g (mm:ss))" $mins $secs
    elif [ $secs -gt 0 ] ; then
        printf "(%s seconds)" $secs
    fi
    echo -e " ####${color_reset}"
    echo
    return $ret
}
